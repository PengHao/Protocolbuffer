// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef PROTOBUF_Message_2eproto__INCLUDED
#define PROTOBUF_Message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class Control;
class ControlDefaultTypeInternal;
extern ControlDefaultTypeInternal _Control_default_instance_;
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;

namespace protobuf_Message_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Message_2eproto

enum Control_Action {
  Control_Action_START = 0,
  Control_Action_STOP = 1,
  Control_Action_PUASE = 2,
  Control_Action_VUP = 3,
  Control_Action_VDOWN = 4,
  Control_Action_NEXT = 5,
  Control_Action_PRVE = 6,
  Control_Action_Control_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Control_Action_Control_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Control_Action_IsValid(int value);
const Control_Action Control_Action_Action_MIN = Control_Action_START;
const Control_Action Control_Action_Action_MAX = Control_Action_PRVE;
const int Control_Action_Action_ARRAYSIZE = Control_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Control_Action_descriptor();
inline const ::std::string& Control_Action_Name(Control_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Control_Action_descriptor(), value);
}
inline bool Control_Action_Parse(
    const ::std::string& name, Control_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Control_Action>(
    Control_Action_descriptor(), name, value);
}
// ===================================================================

class Control : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Control) */ {
 public:
  Control();
  virtual ~Control();

  Control(const Control& from);

  inline Control& operator=(const Control& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Control& default_instance();

  static inline const Control* internal_default_instance() {
    return reinterpret_cast<const Control*>(
               &_Control_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Control* other);

  // implements Message ----------------------------------------------

  inline Control* New() const PROTOBUF_FINAL { return New(NULL); }

  Control* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Control& from);
  void MergeFrom(const Control& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Control* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Control_Action Action;
  static const Action START =
    Control_Action_START;
  static const Action STOP =
    Control_Action_STOP;
  static const Action PUASE =
    Control_Action_PUASE;
  static const Action VUP =
    Control_Action_VUP;
  static const Action VDOWN =
    Control_Action_VDOWN;
  static const Action NEXT =
    Control_Action_NEXT;
  static const Action PRVE =
    Control_Action_PRVE;
  static inline bool Action_IsValid(int value) {
    return Control_Action_IsValid(value);
  }
  static const Action Action_MIN =
    Control_Action_Action_MIN;
  static const Action Action_MAX =
    Control_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    Control_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return Control_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return Control_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return Control_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Control.Action corpus = 1;
  void clear_corpus();
  static const int kCorpusFieldNumber = 1;
  ::Control_Action corpus() const;
  void set_corpus(::Control_Action value);

  // @@protoc_insertion_point(class_scope:Control)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int corpus_;
  mutable int _cached_size_;
  friend struct protobuf_Message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  inline Data* New() const PROTOBUF_FINAL { return New(NULL); }

  Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct protobuf_Message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  enum PackageCase {
    kControl = 1,
    kData = 2,
    PACKAGE_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  inline Message* New() const PROTOBUF_FINAL { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Control control = 1;
  bool has_control() const;
  void clear_control();
  static const int kControlFieldNumber = 1;
  const ::Control& control() const;
  ::Control* mutable_control();
  ::Control* release_control();
  void set_allocated_control(::Control* control);

  // .Data data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::Data& data() const;
  ::Data* mutable_data();
  ::Data* release_data();
  void set_allocated_data(::Data* data);

  PackageCase Package_case() const;
  // @@protoc_insertion_point(class_scope:Message)
 private:
  void set_has_control();
  void set_has_data();

  inline bool has_Package() const;
  void clear_Package();
  inline void clear_has_Package();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PackageUnion {
    PackageUnion() {}
    ::Control* control_;
    ::Data* data_;
  } Package_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_Message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Control

// .Control.Action corpus = 1;
inline void Control::clear_corpus() {
  corpus_ = 0;
}
inline ::Control_Action Control::corpus() const {
  // @@protoc_insertion_point(field_get:Control.corpus)
  return static_cast< ::Control_Action >(corpus_);
}
inline void Control::set_corpus(::Control_Action value) {
  
  corpus_ = value;
  // @@protoc_insertion_point(field_set:Control.corpus)
}

// -------------------------------------------------------------------

// Data

// string data = 1;
inline void Data::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Data::data() const {
  // @@protoc_insertion_point(field_get:Data.data)
  return data_.GetNoArena();
}
inline void Data::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Data.data)
}
#if LANG_CXX11
inline void Data::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Data.data)
}
#endif
inline void Data::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Data.data)
}
inline void Data::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Data.data)
}
inline ::std::string* Data::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Data.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_data() {
  // @@protoc_insertion_point(field_release:Data.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Data.data)
}

// -------------------------------------------------------------------

// Message

// .Control control = 1;
inline bool Message::has_control() const {
  return Package_case() == kControl;
}
inline void Message::set_has_control() {
  _oneof_case_[0] = kControl;
}
inline void Message::clear_control() {
  if (has_control()) {
    delete Package_.control_;
    clear_has_Package();
  }
}
inline  const ::Control& Message::control() const {
  // @@protoc_insertion_point(field_get:Message.control)
  return has_control()
      ? *Package_.control_
      : ::Control::default_instance();
}
inline ::Control* Message::mutable_control() {
  if (!has_control()) {
    clear_Package();
    set_has_control();
    Package_.control_ = new ::Control;
  }
  // @@protoc_insertion_point(field_mutable:Message.control)
  return Package_.control_;
}
inline ::Control* Message::release_control() {
  // @@protoc_insertion_point(field_release:Message.control)
  if (has_control()) {
    clear_has_Package();
    ::Control* temp = Package_.control_;
    Package_.control_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Message::set_allocated_control(::Control* control) {
  clear_Package();
  if (control) {
    set_has_control();
    Package_.control_ = control;
  }
  // @@protoc_insertion_point(field_set_allocated:Message.control)
}

// .Data data = 2;
inline bool Message::has_data() const {
  return Package_case() == kData;
}
inline void Message::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void Message::clear_data() {
  if (has_data()) {
    delete Package_.data_;
    clear_has_Package();
  }
}
inline  const ::Data& Message::data() const {
  // @@protoc_insertion_point(field_get:Message.data)
  return has_data()
      ? *Package_.data_
      : ::Data::default_instance();
}
inline ::Data* Message::mutable_data() {
  if (!has_data()) {
    clear_Package();
    set_has_data();
    Package_.data_ = new ::Data;
  }
  // @@protoc_insertion_point(field_mutable:Message.data)
  return Package_.data_;
}
inline ::Data* Message::release_data() {
  // @@protoc_insertion_point(field_release:Message.data)
  if (has_data()) {
    clear_has_Package();
    ::Data* temp = Package_.data_;
    Package_.data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Message::set_allocated_data(::Data* data) {
  clear_Package();
  if (data) {
    set_has_data();
    Package_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:Message.data)
}

inline bool Message::has_Package() const {
  return Package_case() != PACKAGE_NOT_SET;
}
inline void Message::clear_has_Package() {
  _oneof_case_[0] = PACKAGE_NOT_SET;
}
inline Message::PackageCase Message::Package_case() const {
  return Message::PackageCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Control_Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Control_Action>() {
  return ::Control_Action_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Message_2eproto__INCLUDED
